TSearcherMutable(var) ::= <<
package $var.packageName$;

$var.importStatements:{x | $x$
}$
/** A {@link $var.implementClassNames$} that contains a set of $var.type$s to compare input $var.type$ to.
 * @author TeamworkGuy2
 * @since 2014-11-1
 */
@javax.annotation.Generated("StringTemplate")
public final class $var.className$ implements $var.implementClassNames:{x | $x$}; separator=", "$ {
	private $var.valuesCollectionClassName$ values;
	private final boolean locked;


	@SafeVarargs
	public $var.className$($var.type$... cs) {
		this.locked = false;
		if(cs != null) {
			this.values = new $var.valuesCollectionClassName$(cs.length);
			for($var.type$ c : cs) {
				if(this.values.contains(c)) {
					throw new IllegalArgumentException("duplicate searcher $var.type$ '" + c + "'");
				}
				this.values.add(c);
			}
		}
		else {
			this.values = new $var.valuesCollectionClassName$();
		}
	}


	public $var.className$($var.className$ valueSearcher, boolean locked) {
		this.locked = locked;
		this.values = valueSearcher.values.copy();

		for(int i = 0, size = this.values.size(); i < size; i++) {
			$var.type$ c = this.values.get(i);
			if(this.values.contains(c)) {
				throw new IllegalArgumentException("duplicate searcher $var.type$ '" + c + "'");
			}
		}
	}


	@Override
	public boolean isMatch($var.type$ value) {
		return indexOfMatch(value) > -1;
	}


	@Override
	public int indexOfMatch($var.type$ value) {
		return values.indexOf(value);
	}


	public int size() {
		return values.size();
	}


	public boolean isLocked() {
		return locked;
	}


	private void checkLocked() {
		if(locked) {
			throw new IllegalStateException("cannot modify a locked $var.implementClassNames$");
		}
	}


	public void add$var.typeUpperCase$($var.type$ value) {
		checkLocked();
		if(values.indexOf(value) > -1) {
			throw new IllegalArgumentException("duplicate searcher $var.type$ '" + value + "'");
		}
		values.add(value);
	}


	public boolean remove$var.typeUpperCase$At(int index) {
		checkLocked();
		values.remove(index);
		return true;
	}


	public boolean remove$var.typeUpperCase$($var.type$ value) {
		checkLocked();
		int index = values.indexOf(value);
		if (index == -1) {
			return false;
		}
		values.remove(index);
		return true;
	}


	public $var.implementClassNames$ toImmutable() {
		return new $var.className$(this, true);
	}

}

>>
