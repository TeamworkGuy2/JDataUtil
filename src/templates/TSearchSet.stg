TSearchSet(var) ::= <<
package $var.packageName$;

$var.importStatements:{x | $x$
}$
/** A {@link $var.implementClassNames$} that contains a {@link $var.typeUpperCase$Range}
 * and a {@link CharSearcherMutable}
 * @author TeamworkGuy2
 * @since 2014-11-2
 */
public final class $var.className$ implements $var.implementClassNames:{x | $x$}; separator=", "$ {
	private $var.valuesCollectionClassName$ values;
	private $var.rangesCollectionClassName$ ranges;
	private boolean locked;


	public $var.className$() {
		this.values = new $var.valuesCollectionClassName$();
		this.ranges = new $var.rangesCollectionClassName$();
	}


	@Override
	public boolean isMatch($var.type$ ch) {
		return values.indexOf(ch) > -1 || ranges.isMatch(ch);
	}


	@Override
	public int indexOfMatch($var.type$ ch) {
		int index = values.indexOf(ch);
		if(index > -1) {
			return index;
		}
		else {
			index = ranges.indexOfMatch(ch);
			if(index > -1) {
				return values.size() + index;
			}
			else {
				return -1;
			}
		}
	}


	public int size() {
		return values.size() + ranges.size();
	}


	public void add$var.typeUpperCase$($var.type$ ch) {
		checkLocked();
		if(values.contains(ch)) {
			throw new IllegalArgumentException("duplicate searcher $var.type$ '" + ch + "'");
		}
		values.add(ch);
	}


	public boolean remove$var.typeUpperCase$At(int index) {
		checkLocked();
		values.remove(index);
		return false;
	}


	public boolean remove$var.typeUpperCase$($var.type$ ch) {
		checkLocked();
		return values.removeValue(ch);
	}


	public void addRange($var.type$ start, $var.type$ end) {
		checkLocked();
		ranges.addRange(start, end);
	}


	public boolean removeRangeAt(int index) {
		checkLocked();
		ranges.removeRangeAt(index);
		return true;
	}


	public boolean removeRange($var.type$ start, $var.type$ end) {
		checkLocked();
		return ranges.removeEqualRange(start, end);
	}


	public boolean isLocked() {
		return locked;
	}


	public void setLocked(boolean locked) {
		this.locked = locked;
	}


	private void checkLocked() {
		if(locked) {
			throw new IllegalStateException("cannot modify a locked $var.implementsClassNames$");
		}
	}


	public $var.implementClassNames$ toImmutable() {
		this.setLocked(true);
		return this;
	}

}

>>
